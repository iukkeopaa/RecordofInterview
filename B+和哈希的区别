# B+和哈希的区别


### 数据结构与原理

B + 树
一种多路平衡查找树，结构具有层级性：
非叶子节点仅存储索引键和子节点指针，用于导航查找路径；
所有数据（或数据指针）集中在叶子节点，且叶子节点通过链表有序连接，形成一个有序序列。
查找过程类似 “二分法” 的层级扩展，通过比较键值逐层定位到目标叶子节点。

哈希索引
基于哈希表实现，原理是：
通过哈希函数将索引键映射为哈希值，哈希值对应哈希表中的桶（Bucket）位置；
数据直接存储在哈希值对应的桶中（或桶内的链表 / 红黑树中，解决哈希冲突）。
查找时直接通过哈希函数计算位置，一步定位（理想情况下）。


### 核心查询能力

| **查询类型**            | **B + 树**                                                   | **哈希索引**                                                 |
| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| **等值查询**            | 需从根节点逐层遍历到叶子节点，时间复杂度为 **O(log n)**（n 为数据量）。 | 理想情况下**O(1)**（无哈希冲突时），但冲突时可能退化至**O(k)**（k 为冲突数据量）。 |
| **范围查询**            | 高效支持。利用叶子节点的有序链表，找到范围起始位置后，可通过链表快速遍历所有符合条件的数据（如`WHERE id > 100 AND id < 200`）。 | 不支持。哈希索引的键值是无序的，哈希值与原键值的大小无关，无法通过哈希表直接定位范围，需全表扫描。 |
| **排序查询**            | 天然支持。叶子节点本身有序，可直接利用有序链表返回排序结果（如`ORDER BY`操作）。 | 不支持。哈希表中的数据无序，排序需额外对结果排序，效率低。   |
| **模糊查询 / 前缀匹配** | 支持（如`LIKE 'abc%'`）。可通过 B + 树的有序性，定位到前缀起始位置后遍历。 | 不支持。哈希函数对完整键值计算，无法基于部分键值匹配。       |

### 适用场景

- **B + 树适用场景**
  - **范围查询频繁**：如数据库中的`BETWEEN`、`>、<`等条件查询（例如查询 “年龄在 18-30 岁的用户”）。
  - **需要排序**：依赖索引直接返回有序结果（如`ORDER BY id`）。
  - **等值查询与范围查询混合**：既能处理单个键值查询，也能高效应对连续范围需求。
  - **数据量较大且更新频繁**：B + 树的平衡结构在插入、删除时通过节点分裂 / 合并保持高效，适合动态数据。
- **哈希索引适用场景**
  - **仅等值查询**：如`WHERE id = 123`，且查询频率远高于更新频率（例如用户 ID 的精确匹配）。
  - **数据分布均匀**：能减少哈希冲突（冲突会导致查询效率下降）。
  - **内存数据库**：哈希索引在内存中性能优异，适合全内存场景（如 Redis 的哈希表）。

### 优缺点对比


| **特性** | **B + 树**                                         | **哈希索引**                                                 |
| -------- | -------------------------------------------------- | ------------------------------------------------------------ |
| **优点** | 支持范围查询、排序；查询稳定性高；适合大数据量。   | 等值查询效率极高（O (1)）；结构简单。                        |
| **缺点** | 等值查询效率略低于哈希（需层级遍历）；结构较复杂。 | 不支持范围查询和排序；哈希冲突会降低性能；不适合大数据量的磁盘存储（哈希表扩容成本高）。 |


### 典型应用场景

- **B + 树**：主流数据库的主键索引、非主键索引（如 MySQL 的 InnoDB、Oracle），因为数据库中范围查询和排序是高频操作。
- **哈希索引**：部分数据库的辅助索引（如 MySQL 的 Memory 引擎）、键值对数据库（如 Redis）、缓存系统，适用于纯等值查询场景。
